
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var c_grammar = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["none","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... true
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... true
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 14,
  "$accept": 0,
  "$end": 1,
  "%": 16,
  "&": 9,
  "(": 3,
  ")": 4,
  "*": 10,
  "+": 11,
  ",": 8,
  "-": 12,
  ".": 7,
  "/": 15,
  ":": 22,
  ";": 24,
  "<": 17,
  "=": 23,
  ">": 18,
  "?": 21,
  "ADD_ASSIGN": 49,
  "AND_ASSIGN": 53,
  "AND_OP": 44,
  "BREAK": 81,
  "CASE": 72,
  "CHAR": 59,
  "CONST": 70,
  "CONSTANT_CHAR": 32,
  "CONSTANT_FLOAT": 28,
  "CONSTANT_HEX": 29,
  "CONSTANT_INT": 31,
  "CONSTANT_OCTAL": 30,
  "CONTINUE": 80,
  "DEC_OP": 36,
  "DEFAULT": 73,
  "DIV_ASSIGN": 47,
  "DO": 78,
  "DOUBLE": 64,
  "ELSE": 75,
  "ENUM": 69,
  "EOF": 1,
  "EQ_OP": 42,
  "EXTERN": 56,
  "FLOAT": 63,
  "FOR": 79,
  "GE_OP": 41,
  "IDENTIFIER": 27,
  "IF": 74,
  "IMPORT": 71,
  "INC_OP": 35,
  "INT": 61,
  "LEFT_ASSIGN": 51,
  "LEFT_OP": 38,
  "LE_OP": 40,
  "LONG": 62,
  "MOD_ASSIGN": 48,
  "MUL_ASSIGN": 46,
  "NE_OP": 43,
  "OR_ASSIGN": 55,
  "OR_OP": 45,
  "PTR_OP": 34,
  "RETURN": 82,
  "RIGHT_ASSIGN": 52,
  "RIGHT_OP": 39,
  "SHORT": 60,
  "SIGNED": 65,
  "SIZEOF": 37,
  "STATIC": 57,
  "STRING_LITERAL": 33,
  "STRUCT": 67,
  "SUB_ASSIGN": 50,
  "SWITCH": 76,
  "UNION": 68,
  "UNSIGNED": 66,
  "VOID": 58,
  "WHILE": 77,
  "XOR_ASSIGN": 54,
  "[": 5,
  "]": 6,
  "^": 19,
  "abstract_declarator": 133,
  "additive_expression": 93,
  "and_expression": 97,
  "argument_expression_list": 88,
  "assignment_expression": 103,
  "assignment_operator": 104,
  "ast_tree": 83,
  "block_item": 141,
  "block_item_list": 140,
  "cast_expression": 91,
  "compound_statement": 139,
  "conditional_expression": 102,
  "constant": 85,
  "constant_expression": 106,
  "declaration": 107,
  "declaration_specifiers": 108,
  "declarator": 125,
  "direct_abstract_declarator": 134,
  "direct_declarator": 126,
  "enum_specifier": 120,
  "enumerator": 122,
  "enumerator_list": 121,
  "equality_expression": 96,
  "error": 2,
  "exclusive_or_expression": 98,
  "expression": 105,
  "expression_statement": 142,
  "external_declaration": 147,
  "function_definition": 148,
  "function_specifier": 124,
  "identifier": 84,
  "inclusive_or_expression": 99,
  "init_declarator": 110,
  "init_declarator_list": 109,
  "initializer": 135,
  "initializer_list": 136,
  "iteration_statement": 144,
  "jump_statement": 145,
  "labeled_statement": 138,
  "logical_and_expression": 100,
  "logical_or_expression": 101,
  "multiplicative_expression": 92,
  "parameter_declaration": 131,
  "parameter_list": 130,
  "parameter_type_list": 129,
  "pointer": 127,
  "postfix_expression": 87,
  "primary_expression": 86,
  "relational_expression": 95,
  "selection_statement": 143,
  "shift_expression": 94,
  "specifier_qualifier_list": 117,
  "statement": 137,
  "storage_class_specifier": 111,
  "struct_declaration": 116,
  "struct_declaration_list": 115,
  "struct_declarator": 119,
  "struct_declarator_list": 118,
  "struct_or_union": 114,
  "struct_or_union_specifier": 113,
  "translation_unit": 146,
  "type_name": 132,
  "type_qualifier": 123,
  "type_qualifier_list": 128,
  "type_specifier": 112,
  "unary_expression": 89,
  "unary_operator": 90,
  "{": 25,
  "|": 20,
  "}": 26,
  "~": 13
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "(",
  4: ")",
  5: "[",
  6: "]",
  7: ".",
  8: ",",
  9: "&",
  10: "*",
  11: "+",
  12: "-",
  13: "~",
  14: "!",
  15: "/",
  16: "%",
  17: "<",
  18: ">",
  19: "^",
  20: "|",
  21: "?",
  22: ":",
  23: "=",
  24: ";",
  25: "{",
  26: "}",
  27: "IDENTIFIER",
  28: "CONSTANT_FLOAT",
  29: "CONSTANT_HEX",
  30: "CONSTANT_OCTAL",
  31: "CONSTANT_INT",
  32: "CONSTANT_CHAR",
  33: "STRING_LITERAL",
  34: "PTR_OP",
  35: "INC_OP",
  36: "DEC_OP",
  37: "SIZEOF",
  38: "LEFT_OP",
  39: "RIGHT_OP",
  40: "LE_OP",
  41: "GE_OP",
  42: "EQ_OP",
  43: "NE_OP",
  44: "AND_OP",
  45: "OR_OP",
  46: "MUL_ASSIGN",
  47: "DIV_ASSIGN",
  48: "MOD_ASSIGN",
  49: "ADD_ASSIGN",
  50: "SUB_ASSIGN",
  51: "LEFT_ASSIGN",
  52: "RIGHT_ASSIGN",
  53: "AND_ASSIGN",
  54: "XOR_ASSIGN",
  55: "OR_ASSIGN",
  56: "EXTERN",
  57: "STATIC",
  58: "VOID",
  59: "CHAR",
  60: "SHORT",
  61: "INT",
  62: "LONG",
  63: "FLOAT",
  64: "DOUBLE",
  65: "SIGNED",
  66: "UNSIGNED",
  67: "STRUCT",
  68: "UNION",
  69: "ENUM",
  70: "CONST",
  71: "IMPORT",
  72: "CASE",
  73: "DEFAULT",
  74: "IF",
  75: "ELSE",
  76: "SWITCH",
  77: "WHILE",
  78: "DO",
  79: "FOR",
  80: "CONTINUE",
  81: "BREAK",
  82: "RETURN"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  83,
  83,
  84,
  s,
  [85, 5],
  s,
  [86, 4],
  s,
  [87, 8],
  88,
  88,
  s,
  [89, 6],
  s,
  [90, 6],
  91,
  91,
  s,
  [92, 4],
  s,
  [93, 3],
  s,
  [94, 3],
  s,
  [95, 5],
  s,
  [96, 3],
  97,
  97,
  98,
  98,
  99,
  99,
  100,
  100,
  101,
  101,
  102,
  102,
  103,
  103,
  s,
  [104, 11],
  105,
  105,
  106,
  107,
  107,
  s,
  [108, 8],
  109,
  109,
  110,
  110,
  111,
  111,
  s,
  [112, 11],
  s,
  [113, 3],
  114,
  114,
  115,
  115,
  116,
  s,
  [117, 4],
  118,
  118,
  119,
  s,
  [120, 5],
  121,
  121,
  122,
  s,
  [122, 4, 1],
  125,
  s,
  [126, 6],
  s,
  [127, 4],
  128,
  128,
  129,
  130,
  130,
  s,
  [131, 3],
  132,
  132,
  s,
  [133, 3],
  s,
  [134, 9],
  s,
  [135, 3],
  136,
  136,
  s,
  [137, 6],
  138,
  138,
  139,
  139,
  140,
  140,
  141,
  141,
  142,
  142,
  s,
  [143, 3],
  s,
  [144, 6],
  s,
  [145, 4],
  146,
  146,
  147,
  147,
  148
]),
  rule: u([
  2,
  s,
  [1, 10],
  3,
  1,
  4,
  3,
  4,
  3,
  3,
  2,
  2,
  c,
  [10, 3],
  s,
  [2, 4],
  4,
  s,
  [1, 7],
  4,
  1,
  s,
  [3, 3],
  c,
  [4, 3],
  c,
  [3, 6],
  c,
  [8, 7],
  c,
  [36, 3],
  c,
  [4, 6],
  5,
  c,
  [4, 3],
  s,
  [1, 11],
  c,
  [59, 3],
  c,
  [3, 3],
  1,
  2,
  c,
  [4, 5],
  c,
  [32, 4],
  s,
  [1, 12],
  5,
  4,
  c,
  [111, 4],
  2,
  3,
  c,
  [28, 4],
  c,
  [111, 4],
  5,
  5,
  6,
  c,
  [37, 7],
  c,
  [16, 4],
  c,
  [126, 4],
  c,
  [121, 3],
  c,
  [63, 4],
  1,
  c,
  [134, 4],
  c,
  [8, 4],
  c,
  [44, 3],
  3,
  3,
  4,
  c,
  [4, 4],
  c,
  [32, 3],
  c,
  [78, 8],
  4,
  c,
  [21, 3],
  c,
  [29, 4],
  1,
  2,
  5,
  7,
  5,
  5,
  7,
  6,
  7,
  6,
  7,
  s,
  [2, 3],
  c,
  [56, 6]
])
}),
performAction: function parser__PerformAction(yytext, yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : ast_tree $end */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = undefined;
    this._$ = yylstack[yysp - 1];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 1:
    /*! Production::    ast_tree : translation_unit EOF */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,-,-,LT,LA,-,-):
    this.$ = undefined;
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,-,-,LT,LA,-,-)
    
    
    return yyvstack[yysp - 1];
    break;

case 2:
    /*! Production::    ast_tree : EOF */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = undefined;
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    
    
    return [];
    break;

case 3:
    /*! Production::    identifier : IDENTIFIER */
case 97:
    /*! Production::    storage_class_specifier : EXTERN */
case 98:
    /*! Production::    storage_class_specifier : STATIC */
case 99:
    /*! Production::    type_specifier : VOID */
case 100:
    /*! Production::    type_specifier : CHAR */
case 101:
    /*! Production::    type_specifier : SHORT */
case 102:
    /*! Production::    type_specifier : INT */
case 103:
    /*! Production::    type_specifier : LONG */
case 104:
    /*! Production::    type_specifier : FLOAT */
case 105:
    /*! Production::    type_specifier : DOUBLE */
case 106:
    /*! Production::    type_specifier : SIGNED */
case 107:
    /*! Production::    type_specifier : UNSIGNED */
case 135:
    /*! Production::    function_specifier : IMPORT */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (yytext);
    break;

case 4:
    /*! Production::    constant : CONSTANT_FLOAT */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Constant(this._$, yytext, "float"));
    break;

case 5:
    /*! Production::    constant : CONSTANT_HEX */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Constant(this._$, yytext, "hex"));
    break;

case 6:
    /*! Production::    constant : CONSTANT_OCTAL */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Constant(this._$, yytext, "oct"));
    break;

case 7:
    /*! Production::    constant : CONSTANT_INT */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Constant(this._$, yytext, "int"));
    break;

case 8:
    /*! Production::    constant : CONSTANT_CHAR */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Constant(this._$, yytext, "char"));
    break;

case 9:
    /*! Production::    primary_expression : identifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Identifier(this._$, yytext));
    break;

case 10:
    /*! Production::    primary_expression : constant */
case 13:
    /*! Production::    postfix_expression : primary_expression */
case 23:
    /*! Production::    unary_expression : postfix_expression */
case 35:
    /*! Production::    cast_expression : unary_expression */
case 37:
    /*! Production::    multiplicative_expression : cast_expression */
case 41:
    /*! Production::    additive_expression : multiplicative_expression */
case 44:
    /*! Production::    shift_expression : additive_expression */
case 47:
    /*! Production::    relational_expression : shift_expression */
case 52:
    /*! Production::    equality_expression : relational_expression */
case 55:
    /*! Production::    and_expression : equality_expression */
case 57:
    /*! Production::    exclusive_or_expression : and_expression */
case 59:
    /*! Production::    inclusive_or_expression : exclusive_or_expression */
case 61:
    /*! Production::    logical_and_expression : inclusive_or_expression */
case 63:
    /*! Production::    logical_or_expression : logical_and_expression */
case 65:
    /*! Production::    conditional_expression : logical_or_expression */
case 67:
    /*! Production::    assignment_expression : conditional_expression */
case 80:
    /*! Production::    expression : assignment_expression */
case 95:
    /*! Production::    init_declarator : declarator */
case 108:
    /*! Production::    type_specifier : struct_or_union_specifier */
case 109:
    /*! Production::    type_specifier : enum_specifier */
case 124:
    /*! Production::    struct_declarator : declarator */
case 137:
    /*! Production::    declarator : direct_declarator */
case 150:
    /*! Production::    parameter_type_list : parameter_list */
case 159:
    /*! Production::    abstract_declarator : direct_abstract_declarator */
case 170:
    /*! Production::    initializer : assignment_expression */
case 175:
    /*! Production::    statement : labeled_statement */
case 176:
    /*! Production::    statement : compound_statement */
case 177:
    /*! Production::    statement : expression_statement */
case 178:
    /*! Production::    statement : selection_statement */
case 179:
    /*! Production::    statement : iteration_statement */
case 180:
    /*! Production::    statement : jump_statement */
case 187:
    /*! Production::    block_item : declaration */
case 188:
    /*! Production::    block_item : statement */
case 206:
    /*! Production::    external_declaration : function_definition */
case 207:
    /*! Production::    external_declaration : declaration */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (yyvstack[yysp]);
    break;

case 11:
    /*! Production::    primary_expression : STRING_LITERAL */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.StringLiteral(this._$, yytext));
    break;

case 12:
    /*! Production::    primary_expression : "(" expression ")" */
case 139:
    /*! Production::    direct_declarator : "(" declarator ")" */
case 161:
    /*! Production::    direct_abstract_declarator : "(" abstract_declarator ")" */
case 171:
    /*! Production::    initializer : "{" initializer_list "}" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (yyvstack[yysp - 1]);
    break;

case 14:
    /*! Production::    postfix_expression : postfix_expression "[" expression "]" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "arraySubscript", yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 15:
    /*! Production::    postfix_expression : postfix_expression "(" ")" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.FunctionCallExpression(this._$, yyvstack[yysp - 2]));
    break;

case 16:
    /*! Production::    postfix_expression : postfix_expression "(" argument_expression_list ")" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.FunctionCallExpression(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 17:
    /*! Production::    postfix_expression : postfix_expression "." identifier */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.MemberAccessExpression(this._$, false, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 18:
    /*! Production::    postfix_expression : postfix_expression PTR_OP identifier */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.MemberAccessExpression(this._$, true, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 19:
    /*! Production::    postfix_expression : postfix_expression INC_OP */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.UnaryExpression(this._$, "postfixIncrement", yyvstack[yysp - 1]));
    break;

case 20:
    /*! Production::    postfix_expression : postfix_expression DEC_OP */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.UnaryExpression(this._$, "postfixDecrement", yyvstack[yysp - 1]));
    break;

case 21:
    /*! Production::    argument_expression_list : assignment_expression */
case 93:
    /*! Production::    init_declarator_list : init_declarator */
case 115:
    /*! Production::    struct_declaration_list : struct_declaration */
case 122:
    /*! Production::    struct_declarator_list : struct_declarator */
case 130:
    /*! Production::    enumerator_list : enumerator */
case 148:
    /*! Production::    type_qualifier_list : type_qualifier */
case 151:
    /*! Production::    parameter_list : parameter_declaration */
case 173:
    /*! Production::    initializer_list : initializer */
case 185:
    /*! Production::    block_item_list : block_item */
case 204:
    /*! Production::    translation_unit : external_declaration */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ([yyvstack[yysp]]);
    break;

case 22:
    /*! Production::    argument_expression_list : argument_expression_list "," assignment_expression */
case 94:
    /*! Production::    init_declarator_list : init_declarator_list "," init_declarator */
case 123:
    /*! Production::    struct_declarator_list : struct_declarator_list "," struct_declarator */
case 131:
    /*! Production::    enumerator_list : enumerator_list "," enumerator */
case 152:
    /*! Production::    parameter_list : parameter_list "," parameter_declaration */
case 174:
    /*! Production::    initializer_list : initializer_list "," initializer */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ((yyvstack[yysp - 2].push(yyvstack[yysp]), yyvstack[yysp - 2]));
    break;

case 24:
    /*! Production::    unary_expression : INC_OP unary_expression */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.UnaryExpression(this._$, "prefixIncrement", yyvstack[yysp]));
    break;

case 25:
    /*! Production::    unary_expression : DEC_OP unary_expression */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.UnaryExpression(this._$, "prefixDecrement", yyvstack[yysp]));
    break;

case 26:
    /*! Production::    unary_expression : unary_operator cast_expression */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.UnaryExpression(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 27:
    /*! Production::    unary_expression : SIZEOF unary_expression */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SizeofExpression(this._$, yyvstack[yysp]));
    break;

case 28:
    /*! Production::    unary_expression : SIZEOF "(" type_name ")" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SizeofExpression(this._$, yyvstack[yysp - 1]));
    break;

case 29:
    /*! Production::    unary_operator : "&" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("addressOf");
    break;

case 30:
    /*! Production::    unary_operator : "*" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("dereference");
    break;

case 31:
    /*! Production::    unary_operator : "+" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("unaryPlus");
    break;

case 32:
    /*! Production::    unary_operator : "-" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("unaryMinus");
    break;

case 33:
    /*! Production::    unary_operator : "~" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("bitwiseNot");
    break;

case 34:
    /*! Production::    unary_operator : "!" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("logicalNot");
    break;

case 36:
    /*! Production::    cast_expression : "(" type_name ")" cast_expression */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.CastExpression(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 38:
    /*! Production::    multiplicative_expression : multiplicative_expression "*" cast_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "mul", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 39:
    /*! Production::    multiplicative_expression : multiplicative_expression "/" cast_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "div", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 40:
    /*! Production::    multiplicative_expression : multiplicative_expression "%" cast_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "mod", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 42:
    /*! Production::    additive_expression : additive_expression "+" multiplicative_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "add", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 43:
    /*! Production::    additive_expression : additive_expression "-" multiplicative_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "sub", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 45:
    /*! Production::    shift_expression : shift_expression LEFT_OP additive_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "bitwiseShiftLeft", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 46:
    /*! Production::    shift_expression : shift_expression RIGHT_OP additive_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "bitwiseShiftRight", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 48:
    /*! Production::    relational_expression : relational_expression "<" shift_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalLT", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 49:
    /*! Production::    relational_expression : relational_expression ">" shift_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalGT", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 50:
    /*! Production::    relational_expression : relational_expression LE_OP shift_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalLEq", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 51:
    /*! Production::    relational_expression : relational_expression GE_OP shift_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalGEq", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 53:
    /*! Production::    equality_expression : equality_expression EQ_OP relational_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalEq", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 54:
    /*! Production::    equality_expression : equality_expression NE_OP relational_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "relationalNEq", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 56:
    /*! Production::    and_expression : and_expression "&" equality_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "bitwiseAnd", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 58:
    /*! Production::    exclusive_or_expression : exclusive_or_expression "^" and_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "bitwiseXor", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 60:
    /*! Production::    inclusive_or_expression : inclusive_or_expression "|" exclusive_or_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "bitwiseOr", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 62:
    /*! Production::    logical_and_expression : logical_and_expression AND_OP inclusive_or_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "logicalAnd", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 64:
    /*! Production::    logical_or_expression : logical_or_expression OR_OP logical_and_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "logicalOr", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 66:
    /*! Production::    conditional_expression : logical_or_expression "?" expression ":" conditional_expression */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ConditionalExpression(this._$, yyvstack[yysp - 4], yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 68:
    /*! Production::    assignment_expression : unary_expression assignment_operator assignment_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AssignmentExpression(this._$, yyvstack[yysp - 1], yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 69:
    /*! Production::    assignment_operator : "=" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (undefined);
    break;

case 70:
    /*! Production::    assignment_operator : MUL_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("mul");
    break;

case 71:
    /*! Production::    assignment_operator : DIV_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("div");
    break;

case 72:
    /*! Production::    assignment_operator : MOD_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("mod");
    break;

case 73:
    /*! Production::    assignment_operator : ADD_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("add");
    break;

case 74:
    /*! Production::    assignment_operator : SUB_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("sub");
    break;

case 75:
    /*! Production::    assignment_operator : LEFT_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("leftShift");
    break;

case 76:
    /*! Production::    assignment_operator : RIGHT_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("rightShift");
    break;

case 77:
    /*! Production::    assignment_operator : AND_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("bitwiseAnd");
    break;

case 78:
    /*! Production::    assignment_operator : XOR_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("bitwiseXor");
    break;

case 79:
    /*! Production::    assignment_operator : OR_ASSIGN */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("bitwiseOr");
    break;

case 81:
    /*! Production::    expression : expression "," assignment_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BinaryExpression(this._$, "comma", yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 82:
    /*! Production::    constant_expression : conditional_expression */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ConstantExpression(this._$, yyvstack[yysp]));
    break;

case 83:
    /*! Production::    declaration : declaration_specifiers ";" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Declaration(this._$, yyvstack[yysp - 1]));
    break;

case 84:
    /*! Production::    declaration : declaration_specifiers init_declarator_list ";" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Declaration(this._$, yyvstack[yysp - 2], yyvstack[yysp - 1]));
    break;

case 85:
    /*! Production::    declaration_specifiers : storage_class_specifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, [], [], [yyvstack[yysp]], []));
    break;

case 86:
    /*! Production::    declaration_specifiers : storage_class_specifier declaration_specifiers */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, yyvstack[yysp].specifierList, yyvstack[yysp].qualifierList, [yyvstack[yysp - 1], ...yyvstack[yysp].storageList], yyvstack[yysp].fnSpecifierList));
    break;

case 87:
    /*! Production::    declaration_specifiers : type_specifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, [yyvstack[yysp]], [], [], []));
    break;

case 88:
    /*! Production::    declaration_specifiers : type_specifier declaration_specifiers */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, [yyvstack[yysp - 1], ...yyvstack[yysp].specifierList], yyvstack[yysp].qualifierList, yyvstack[yysp].storageList, yyvstack[yysp].fnSpecifierList));
    break;

case 89:
    /*! Production::    declaration_specifiers : type_qualifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, [], [yyvstack[yysp]], [], []));
    break;

case 90:
    /*! Production::    declaration_specifiers : type_qualifier declaration_specifiers */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, yyvstack[yysp].specifierList, [yyvstack[yysp - 1], ...yyvstack[yysp].qualifierList], yyvstack[yysp].storageList, yyvstack[yysp].fnSpecifierList));
    break;

case 91:
    /*! Production::    declaration_specifiers : function_specifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, [], [], [], [yyvstack[yysp]]));
    break;

case 92:
    /*! Production::    declaration_specifiers : function_specifier declaration_specifiers */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DeclarationSpecifiers(this._$, yyvstack[yysp].specifierList, yyvstack[yysp].qualifierList, yyvstack[yysp].storageList, [yyvstack[yysp - 1], ...yyvstack[yysp].fnSpecifierList]));
    break;

case 96:
    /*! Production::    init_declarator : declarator "=" initializer */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.InitDeclarator(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 110:
    /*! Production::    struct_or_union_specifier : struct_or_union identifier "{" struct_declaration_list "}" */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.StructUnionSpecifier(this._$, yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 111:
    /*! Production::    struct_or_union_specifier : struct_or_union "{" struct_declaration_list "}" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.StructUnionSpecifier(this._$, yyvstack[yysp - 3], undefined, yyvstack[yysp - 1]));
    break;

case 112:
    /*! Production::    struct_or_union_specifier : struct_or_union identifier */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.StructUnionSpecifier(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 113:
    /*! Production::    struct_or_union : STRUCT */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("struct");
    break;

case 114:
    /*! Production::    struct_or_union : UNION */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("union");
    break;

case 116:
    /*! Production::    struct_declaration_list : struct_declaration_list struct_declaration */
case 149:
    /*! Production::    type_qualifier_list : type_qualifier_list type_qualifier */
case 186:
    /*! Production::    block_item_list : block_item_list block_item */
case 205:
    /*! Production::    translation_unit : translation_unit external_declaration */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ((yyvstack[yysp - 1].push(yyvstack[yysp]), yyvstack[yysp - 1]));
    break;

case 117:
    /*! Production::    struct_declaration : specifier_qualifier_list struct_declarator_list ";" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.StructDeclaration(this._$, yyvstack[yysp - 2], yyvstack[yysp - 1]));
    break;

case 118:
    /*! Production::    specifier_qualifier_list : type_specifier specifier_qualifier_list */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SpecifierQualifiers(this._$, [yyvstack[yysp - 1], ...yyvstack[yysp].specifierList], yyvstack[yysp].qualifierList));
    break;

case 119:
    /*! Production::    specifier_qualifier_list : type_specifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SpecifierQualifiers(this._$, [yyvstack[yysp]], []));
    break;

case 120:
    /*! Production::    specifier_qualifier_list : type_qualifier specifier_qualifier_list */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SpecifierQualifiers(this._$, yyvstack[yysp].specifierList, [yyvstack[yysp - 1], ...yyvstack[yysp].qualifierList]));
    break;

case 121:
    /*! Production::    specifier_qualifier_list : type_qualifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SpecifierQualifiers(this._$, [], [yyvstack[yysp]]));
    break;

case 125:
    /*! Production::    enum_specifier : ENUM "{" enumerator_list "}" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.EnumSpecifier(this._$, undefined, yyvstack[yysp - 1]));
    break;

case 126:
    /*! Production::    enum_specifier : ENUM identifier "{" enumerator_list "}" */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.EnumSpecifier(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 127:
    /*! Production::    enum_specifier : ENUM "{" enumerator_list "," "}" */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.EnumSpecifier(this._$, undefined, yyvstack[yysp - 2]));
    break;

case 128:
    /*! Production::    enum_specifier : ENUM identifier "{" enumerator_list "," "}" */

    // default action (generated by JISON mode none/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode none/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.EnumSpecifier(this._$, yyvstack[yysp - 4], yyvstack[yysp - 2]));
    break;

case 129:
    /*! Production::    enum_specifier : ENUM identifier */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.EnumSpecifier(this._$, yyvstack[yysp]));
    break;

case 132:
    /*! Production::    enumerator : identifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Enumerator(this._$, yyvstack[yysp]));
    break;

case 133:
    /*! Production::    enumerator : identifier "=" constant_expression */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Enumerator(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 134:
    /*! Production::    type_qualifier : CONST */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ("const");
    break;

case 136:
    /*! Production::    declarator : pointer direct_declarator */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.PointerDeclarator(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 138:
    /*! Production::    direct_declarator : identifier */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.IdentifierDeclarator(this._$, yyvstack[yysp]));
    break;

case 140:
    /*! Production::    direct_declarator : direct_declarator "[" constant_expression "]" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ArrayDeclarator(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 141:
    /*! Production::    direct_declarator : direct_declarator "[" "]" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ArrayDeclarator(this._$, yyvstack[yysp - 2]));
    break;

case 142:
    /*! Production::    direct_declarator : direct_declarator "(" parameter_type_list ")" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.FunctionDeclarator(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 143:
    /*! Production::    direct_declarator : direct_declarator "(" ")" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.FunctionDeclarator(this._$, yyvstack[yysp - 2]));
    break;

case 144:
    /*! Production::    pointer : "*" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Pointer(this._$));
    break;

case 145:
    /*! Production::    pointer : "*" type_qualifier_list */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Pointer(this._$, yyvstack[yysp]));
    break;

case 146:
    /*! Production::    pointer : "*" pointer */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Pointer(this._$, undefined, yyvstack[yysp]));
    break;

case 147:
    /*! Production::    pointer : "*" type_qualifier_list pointer */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.Pointer(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 153:
    /*! Production::    parameter_declaration : declaration_specifiers declarator */
case 154:
    /*! Production::    parameter_declaration : declaration_specifiers abstract_declarator */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ParameterDeclaration(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 155:
    /*! Production::    parameter_declaration : declaration_specifiers */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ParameterDeclaration(this._$, yyvstack[yysp]));
    break;

case 156:
    /*! Production::    type_name : specifier_qualifier_list */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.TypeName(this._$, yyvstack[yysp]));
    break;

case 157:
    /*! Production::    type_name : specifier_qualifier_list abstract_declarator */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.TypeName(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 158:
    /*! Production::    abstract_declarator : pointer */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractPointerDeclarator(this._$, yyvstack[yysp]));
    break;

case 160:
    /*! Production::    abstract_declarator : pointer direct_abstract_declarator */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractPointerDeclarator(this._$, yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 162:
    /*! Production::    direct_abstract_declarator : "[" "]" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractArrayDeclarator(this._$));
    break;

case 163:
    /*! Production::    direct_abstract_declarator : "[" constant_expression "]" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractArrayDeclarator(this._$, undefined, yyvstack[yysp - 1]));
    break;

case 164:
    /*! Production::    direct_abstract_declarator : direct_abstract_declarator "[" "]" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractArrayDeclarator(this._$, yyvstack[yysp - 2]));
    break;

case 165:
    /*! Production::    direct_abstract_declarator : direct_abstract_declarator "[" constant_expression "]" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractArrayDeclarator(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 166:
    /*! Production::    direct_abstract_declarator : "(" ")" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractFunctionDeclarator(this._$));
    break;

case 167:
    /*! Production::    direct_abstract_declarator : "(" parameter_type_list ")" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractFunctionDeclarator(this._$, undefined, yyvstack[yysp - 1]));
    break;

case 168:
    /*! Production::    direct_abstract_declarator : direct_abstract_declarator "(" ")" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractFunctionDeclarator(this._$, yyvstack[yysp - 2]));
    break;

case 169:
    /*! Production::    direct_abstract_declarator : direct_abstract_declarator "(" parameter_type_list ")" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.AbstractFunctionDeclarator(this._$, yyvstack[yysp - 3], yyvstack[yysp - 1]));
    break;

case 172:
    /*! Production::    initializer : "{" initializer_list "," "}" */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (yyvstack[yysp - 2]);
    break;

case 181:
    /*! Production::    labeled_statement : CASE constant_expression ":" statement */

    // default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode none/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.CaseStatement(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 182:
    /*! Production::    labeled_statement : DEFAULT ":" statement */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DefaultStatement(this._$, yyvstack[yysp]));
    break;

case 183:
    /*! Production::    compound_statement : "{" "}" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.CompoundStatement(this._$, []));
    break;

case 184:
    /*! Production::    compound_statement : "{" block_item_list "}" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.CompoundStatement(this._$, yyvstack[yysp - 1]));
    break;

case 189:
    /*! Production::    expression_statement : ";" */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.NoOp(this._$));
    break;

case 190:
    /*! Production::    expression_statement : expression ";" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ExpressionStatement(this._$, yyvstack[yysp - 1]));
    break;

case 191:
    /*! Production::    selection_statement : IF "(" expression ")" statement */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.IfStatement(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 192:
    /*! Production::    selection_statement : IF "(" expression ")" statement ELSE statement */

    // default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.IfStatement(this._$, yyvstack[yysp - 4], yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 193:
    /*! Production::    selection_statement : SWITCH "(" expression ")" statement */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.SwitchStatement(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 194:
    /*! Production::    iteration_statement : WHILE "(" expression ")" statement */

    // default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode none/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.WhileLoop(this._$, yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 195:
    /*! Production::    iteration_statement : DO statement WHILE "(" expression ")" ";" */

    // default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.DoWhileLoop(this._$, yyvstack[yysp - 5], yyvstack[yysp - 2]));
    break;

case 196:
    /*! Production::    iteration_statement : FOR "(" expression_statement expression_statement ")" statement */
case 198:
    /*! Production::    iteration_statement : FOR "(" declaration expression_statement ")" statement */

    // default action (generated by JISON mode none/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode none/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ForLoop(this._$, yyvstack[yysp - 3], yyvstack[yysp - 2], undefined, yyvstack[yysp]));
    break;

case 197:
    /*! Production::    iteration_statement : FOR "(" expression_statement expression_statement expression ")" statement */
case 199:
    /*! Production::    iteration_statement : FOR "(" declaration expression_statement expression ")" statement */

    // default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode none/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ForLoop(this._$, yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp]));
    break;

case 200:
    /*! Production::    jump_statement : CONTINUE ";" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ContinueStatement(this._$));
    break;

case 201:
    /*! Production::    jump_statement : BREAK ";" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.BreakStatement(this._$));
    break;

case 202:
    /*! Production::    jump_statement : RETURN ";" */

    // default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode none/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ReturnStatement(this._$));
    break;

case 203:
    /*! Production::    jump_statement : RETURN expression ";" */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.ReturnStatement(this._$, yyvstack[yysp - 1]));
    break;

case 208:
    /*! Production::    function_definition : declaration_specifiers declarator compound_statement */

    // default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode none/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)
    
    
    this.$ = (new t.FunctionDefinition(this._$, yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]));
    break;

}
},
table: bt({
  len: u([
  30,
  1,
  28,
  s,
  [0, 4],
  10,
  s,
  [31, 4],
  s,
  [0, 15],
  3,
  3,
  s,
  [0, 4],
  5,
  0,
  2,
  4,
  7,
  0,
  10,
  0,
  7,
  s,
  [0, 5],
  24,
  21,
  4,
  24,
  0,
  38,
  84,
  0,
  8,
  7,
  37,
  28,
  9,
  0,
  0,
  1,
  21,
  21,
  0,
  9,
  24,
  24,
  2,
  0,
  3,
  4,
  0,
  0,
  39,
  0,
  37,
  8,
  42,
  23,
  23,
  24,
  23,
  c,
  [25, 3],
  s,
  [0, 5],
  10,
  s,
  [0, 3],
  57,
  11,
  s,
  [0, 5],
  12,
  14,
  18,
  20,
  22,
  25,
  0,
  0,
  83,
  c,
  [23, 7],
  s,
  [0, 3],
  36,
  1,
  0,
  2,
  s,
  [1, 3],
  56,
  s,
  [1, 3],
  38,
  c,
  [109, 3],
  1,
  s,
  [0, 3],
  c,
  [18, 3],
  0,
  12,
  s,
  [0, 3],
  21,
  0,
  c,
  [9, 3],
  s,
  [0, 4],
  4,
  36,
  2,
  2,
  0,
  36,
  s,
  [0, 11],
  37,
  33,
  37,
  38,
  c,
  [19, 3],
  c,
  [9, 3],
  c,
  [92, 4],
  32,
  31,
  2,
  1,
  7,
  30,
  29,
  28,
  28,
  s,
  [27, 4],
  26,
  26,
  25,
  25,
  s,
  [24, 3],
  c,
  [70, 3],
  56,
  0,
  36,
  s,
  [37, 3],
  1,
  64,
  s,
  [0, 3],
  c,
  [43, 3],
  c,
  [118, 3],
  8,
  4,
  38,
  c,
  [48, 3],
  8,
  c,
  [82, 5],
  c,
  [167, 3],
  2,
  9,
  2,
  c,
  [96, 5],
  1,
  10,
  11,
  0,
  24,
  0,
  4,
  34,
  c,
  [157, 3],
  18,
  s,
  [20, 4],
  22,
  22,
  25,
  c,
  [45, 3],
  0,
  56,
  c,
  [55, 3],
  2,
  2,
  1,
  39,
  39,
  c,
  [46, 3],
  37,
  28,
  1,
  c,
  [150, 3],
  c,
  [156, 4],
  0,
  35,
  c,
  [179, 3],
  c,
  [30, 4],
  56,
  56,
  37,
  38,
  38,
  c,
  [21, 8],
  0,
  47,
  c,
  [45, 3],
  56,
  2,
  56,
  c,
  [79, 3],
  56,
  1,
  c,
  [58, 3],
  c,
  [60, 3],
  0,
  0
]),
  symbol: u([
  1,
  s,
  [56, 16, 1],
  83,
  107,
  108,
  s,
  [111, 4, 1],
  120,
  123,
  124,
  146,
  147,
  148,
  1,
  c,
  [31, 17],
  c,
  [30, 9],
  147,
  148,
  3,
  10,
  24,
  27,
  84,
  109,
  110,
  125,
  126,
  127,
  3,
  4,
  5,
  8,
  c,
  [13, 3],
  c,
  [44, 16],
  c,
  [43, 8],
  c,
  [31, 93],
  25,
  27,
  84,
  c,
  [3, 3],
  8,
  23,
  24,
  25,
  139,
  8,
  24,
  3,
  27,
  84,
  126,
  c,
  [48, 4],
  c,
  [14, 3],
  c,
  [55, 5],
  27,
  70,
  123,
  127,
  128,
  3,
  10,
  27,
  84,
  c,
  [165, 9],
  25,
  c,
  [73, 17],
  c,
  [14, 13],
  s,
  [112, 6, 1],
  120,
  123,
  27,
  84,
  121,
  122,
  c,
  [49, 24],
  3,
  s,
  [9, 6, 1],
  25,
  s,
  [27, 7, 1],
  35,
  36,
  37,
  s,
  [84, 4, 1],
  s,
  [89, 15, 1],
  135,
  c,
  [38, 7],
  s,
  [24, 10, 1],
  c,
  [40, 3],
  s,
  [56, 19, 1],
  s,
  [76, 7, 1],
  c,
  [66, 19],
  105,
  c,
  [363, 9],
  s,
  [137, 9, 1],
  c,
  [202, 4],
  c,
  [368, 8],
  c,
  [227, 4],
  6,
  c,
  [100, 6],
  c,
  [137, 28],
  106,
  4,
  c,
  [313, 24],
  129,
  130,
  131,
  c,
  [292, 9],
  4,
  c,
  [261, 21],
  26,
  c,
  [22, 16],
  c,
  [21, 4],
  c,
  [132, 4],
  118,
  119,
  c,
  [133, 6],
  10,
  27,
  c,
  [34, 16],
  c,
  [33, 4],
  c,
  [24, 23],
  8,
  26,
  8,
  23,
  26,
  c,
  [344, 5],
  c,
  [320, 37],
  136,
  4,
  6,
  s,
  [8, 5, 1],
  s,
  [15, 10, 1],
  26,
  s,
  [38, 18, 1],
  104,
  c,
  [37, 3],
  21,
  22,
  24,
  26,
  45,
  s,
  [3, 10, 1],
  c,
  [48, 11],
  34,
  35,
  36,
  c,
  [51, 18],
  c,
  [126, 7],
  c,
  [125, 16],
  c,
  [23, 46],
  91,
  c,
  [24, 23],
  c,
  [143, 7],
  44,
  45,
  c,
  [9, 3],
  c,
  [132, 3],
  c,
  [10, 4],
  c,
  [42, 17],
  c,
  [283, 13],
  c,
  [504, 20],
  c,
  [303, 6],
  132,
  c,
  [67, 3],
  c,
  [200, 4],
  c,
  [78, 7],
  9,
  c,
  [12, 18],
  c,
  [216, 4],
  c,
  [14, 4],
  c,
  [240, 6],
  24,
  26,
  c,
  [234, 6],
  c,
  [18, 12],
  c,
  [254, 8],
  c,
  [20, 4],
  11,
  12,
  c,
  [22, 20],
  c,
  [305, 11],
  c,
  [25, 10],
  c,
  [699, 78],
  c,
  [698, 7],
  c,
  [1068, 9],
  c,
  [692, 35],
  22,
  c,
  [970, 3],
  s,
  [3, 3],
  c,
  [135, 8],
  c,
  [44, 10],
  c,
  [118, 30],
  c,
  [109, 3],
  c,
  [108, 5],
  24,
  24,
  c,
  [59, 8],
  c,
  [611, 29],
  105,
  c,
  [836, 3],
  6,
  4,
  4,
  8,
  c,
  [774, 6],
  c,
  [1059, 4],
  133,
  134,
  c,
  [755, 21],
  8,
  24,
  c,
  [696, 3],
  c,
  [695, 8],
  c,
  [185, 29],
  c,
  [740, 3],
  26,
  c,
  [40, 35],
  103,
  c,
  [36, 36],
  105,
  c,
  [37, 33],
  c,
  [70, 38],
  4,
  c,
  [38, 20],
  s,
  [88, 16, 1],
  27,
  84,
  27,
  84,
  c,
  [149, 54],
  c,
  [719, 40],
  c,
  [94, 32],
  c,
  [32, 31],
  4,
  8,
  4,
  c,
  [1113, 4],
  c,
  [419, 3],
  c,
  [41, 30],
  c,
  [30, 29],
  c,
  [29, 28],
  c,
  [28, 55],
  c,
  [27, 107],
  c,
  [26, 51],
  c,
  [25, 49],
  c,
  [24, 48],
  22,
  c,
  [933, 57],
  c,
  [806, 105],
  c,
  [37, 41],
  77,
  c,
  [1078, 18],
  c,
  [1270, 16],
  c,
  [1260, 29],
  142,
  8,
  24,
  c,
  [1900, 24],
  c,
  [1898, 5],
  c,
  [2204, 3],
  134,
  c,
  [8, 4],
  c,
  [1825, 5],
  c,
  [90, 17],
  c,
  [43, 8],
  c,
  [1159, 3],
  c,
  [1946, 3],
  c,
  [743, 3],
  c,
  [2013, 36],
  c,
  [1933, 4],
  c,
  [1932, 4],
  c,
  [1184, 11],
  c,
  [1461, 12],
  c,
  [1880, 20],
  8,
  22,
  c,
  [1701, 9],
  6,
  8,
  c,
  [854, 3],
  c,
  [1706, 10],
  c,
  [1649, 11],
  c,
  [519, 25],
  4,
  5,
  c,
  [195, 4],
  10,
  c,
  [232, 24],
  c,
  [187, 6],
  c,
  [1711, 56],
  c,
  [1729, 30],
  c,
  [20, 60],
  c,
  [1789, 22],
  c,
  [1811, 43],
  c,
  [1836, 34],
  c,
  [768, 47],
  c,
  [378, 3],
  c,
  [382, 3],
  c,
  [1764, 9],
  c,
  [666, 30],
  142,
  c,
  [39, 40],
  c,
  [606, 4],
  c,
  [2581, 64],
  c,
  [530, 3],
  c,
  [815, 35],
  c,
  [960, 43],
  c,
  [1052, 56],
  c,
  [56, 112],
  c,
  [1864, 52],
  c,
  [38, 54],
  6,
  4,
  c,
  [2403, 39],
  s,
  [75, 8, 1],
  c,
  [554, 3],
  c,
  [616, 57],
  c,
  [58, 114],
  c,
  [2431, 9],
  c,
  [449, 104]
]),
  type: u([
  s,
  [2, 17],
  s,
  [0, 13],
  1,
  c,
  [31, 28],
  c,
  [15, 10],
  s,
  [2, 23],
  c,
  [41, 12],
  c,
  [31, 91],
  c,
  [3, 6],
  c,
  [5, 8],
  c,
  [48, 15],
  c,
  [65, 6],
  c,
  [72, 27],
  c,
  [86, 23],
  c,
  [49, 40],
  c,
  [308, 18],
  c,
  [183, 30],
  c,
  [66, 43],
  c,
  [84, 21],
  c,
  [92, 30],
  c,
  [136, 36],
  c,
  [28, 18],
  c,
  [308, 19],
  c,
  [59, 19],
  c,
  [132, 15],
  c,
  [133, 19],
  c,
  [24, 36],
  c,
  [33, 27],
  c,
  [321, 51],
  c,
  [358, 47],
  c,
  [308, 27],
  c,
  [23, 46],
  c,
  [47, 41],
  c,
  [504, 59],
  s,
  [2, 168],
  c,
  [698, 40],
  c,
  [338, 31],
  c,
  [251, 47],
  c,
  [313, 48],
  c,
  [41, 33],
  c,
  [755, 30],
  c,
  [804, 17],
  c,
  [185, 43],
  c,
  [917, 47],
  c,
  [37, 42],
  c,
  [1160, 55],
  c,
  [38, 21],
  c,
  [1266, 3],
  c,
  [1239, 67],
  c,
  [406, 44],
  c,
  [32, 46],
  c,
  [1487, 13],
  c,
  [41, 27],
  c,
  [30, 29],
  c,
  [1292, 35],
  c,
  [28, 48],
  c,
  [27, 107],
  c,
  [26, 51],
  c,
  [25, 49],
  c,
  [24, 65],
  c,
  [527, 72],
  c,
  [806, 74],
  c,
  [810, 59],
  c,
  [1260, 47],
  c,
  [48, 27],
  c,
  [1788, 26],
  c,
  [90, 24],
  c,
  [1096, 40],
  c,
  [2309, 8],
  c,
  [91, 20],
  c,
  [1623, 74],
  c,
  [112, 11],
  c,
  [190, 34],
  s,
  [2, 265],
  c,
  [2014, 52],
  c,
  [602, 48],
  c,
  [85, 34],
  c,
  [2581, 54],
  c,
  [67, 31],
  c,
  [1991, 65],
  c,
  [2298, 56],
  c,
  [56, 100],
  c,
  [1864, 59],
  c,
  [900, 91],
  c,
  [2630, 84],
  c,
  [58, 115],
  c,
  [449, 83]
]),
  state: u([
  1,
  s,
  [6, 4, 1],
  23,
  27,
  24,
  10,
  11,
  2,
  s,
  [4, 6, 1],
  c,
  [12, 5],
  32,
  5,
  40,
  35,
  38,
  33,
  37,
  36,
  43,
  c,
  [16, 7],
  44,
  c,
  [8, 7],
  45,
  c,
  [8, 7],
  46,
  c,
  [8, 7],
  47,
  50,
  51,
  40,
  56,
  61,
  60,
  59,
  40,
  62,
  37,
  36,
  67,
  23,
  27,
  64,
  65,
  66,
  24,
  68,
  71,
  69,
  70,
  93,
  94,
  85,
  79,
  77,
  82,
  s,
  [109, 7, -1],
  97,
  92,
  84,
  78,
  76,
  74,
  73,
  c,
  [20, 18],
  134,
  125,
  113,
  115,
  c,
  [72, 7],
  114,
  116,
  117,
  111,
  112,
  s,
  [118, 4, 1],
  40,
  135,
  136,
  37,
  36,
  c,
  [43, 4],
  140,
  c,
  [43, 12],
  139,
  137,
  145,
  c,
  [41, 7],
  141,
  143,
  144,
  147,
  146,
  c,
  [106, 3],
  149,
  c,
  [106, 4],
  c,
  [8, 3],
  151,
  c,
  [7, 3],
  40,
  152,
  153,
  154,
  c,
  [127, 5],
  155,
  c,
  [19, 5],
  156,
  c,
  [131, 3],
  160,
  c,
  [131, 20],
  162,
  161,
  163,
  c,
  [22, 4],
  183,
  82,
  c,
  [6, 4],
  185,
  c,
  [6, 5],
  140,
  82,
  186,
  c,
  [7, 4],
  187,
  c,
  [13, 5],
  c,
  [158, 15],
  191,
  c,
  [76, 3],
  193,
  24,
  68,
  192,
  c,
  [185, 32],
  210,
  c,
  [184, 5],
  35,
  38,
  c,
  [185, 21],
  211,
  c,
  [62, 20],
  218,
  s,
  [116, 6, 1],
  c,
  [27, 19],
  223,
  40,
  227,
  37,
  229,
  228,
  230,
  c,
  [217, 7],
  71,
  237,
  c,
  [81, 18],
  238,
  c,
  [54, 18],
  243,
  c,
  [73, 19],
  244,
  c,
  [58, 15],
  245,
  c,
  [36, 19],
  246,
  c,
  [20, 4],
  248,
  c,
  [21, 14],
  249,
  250,
  251,
  c,
  [267, 20],
  c,
  [287, 26],
  252,
  c,
  [105, 14],
  253,
  c,
  [15, 13],
  254,
  258,
  257,
  230,
  c,
  [17, 12],
  260,
  c,
  [13, 11],
  261,
  c,
  [12, 10],
  262,
  c,
  [11, 10],
  263,
  c,
  [11, 9],
  264,
  c,
  [10, 9],
  265,
  c,
  [10, 9],
  266,
  c,
  [10, 9],
  267,
  c,
  [10, 8],
  268,
  c,
  [9, 8],
  269,
  c,
  [9, 7],
  270,
  c,
  [8, 7],
  271,
  c,
  [8, 6],
  272,
  c,
  [7, 6],
  273,
  c,
  [7, 6],
  274,
  c,
  [399, 20],
  276,
  c,
  [399, 24],
  277,
  c,
  [46, 19],
  278,
  c,
  [20, 19],
  279,
  c,
  [20, 19],
  280,
  c,
  [106, 20],
  283,
  c,
  [567, 8],
  282,
  c,
  [720, 8],
  285,
  40,
  56,
  286,
  40,
  c,
  [13, 8],
  62,
  37,
  229,
  291,
  143,
  144,
  289,
  c,
  [307, 13],
  c,
  [502, 6],
  293,
  40,
  294,
  c,
  [739, 3],
  c,
  [528, 6],
  c,
  [726, 15],
  297,
  c,
  [46, 6],
  303,
  286,
  c,
  [70, 8],
  258,
  c,
  [68, 9],
  c,
  [127, 16],
  304,
  c,
  [632, 25],
  125,
  309,
  c,
  [21, 20],
  310,
  c,
  [137, 18],
  312,
  c,
  [102, 8],
  314,
  143,
  144,
  c,
  [30, 17],
  318,
  c,
  [69, 18],
  319,
  c,
  [88, 20],
  320,
  c,
  [136, 26],
  321,
  c,
  [27, 26],
  322,
  c,
  [27, 25],
  323,
  c,
  [20, 19],
  325,
  c,
  [20, 19],
  327,
  c,
  [87, 20],
  332,
  c,
  [114, 26],
  334,
  c,
  [27, 26],
  336,
  c,
  [27, 26],
  338,
  c,
  [27, 26],
  339,
  c,
  [27, 6]
]),
  mode: u([
  s,
  [1, 38],
  s,
  [2, 7],
  c,
  [23, 85],
  c,
  [27, 5],
  1,
  c,
  [23, 7],
  c,
  [9, 3],
  c,
  [39, 8],
  c,
  [18, 5],
  c,
  [12, 8],
  s,
  [2, 16],
  c,
  [90, 20],
  c,
  [38, 32],
  s,
  [1, 54],
  c,
  [87, 6],
  c,
  [292, 39],
  c,
  [199, 8],
  c,
  [330, 31],
  c,
  [18, 31],
  c,
  [272, 11],
  c,
  [321, 20],
  c,
  [290, 10],
  c,
  [233, 19],
  c,
  [24, 7],
  c,
  [67, 6],
  c,
  [272, 19],
  s,
  [2, 18],
  c,
  [293, 69],
  c,
  [146, 11],
  c,
  [398, 8],
  c,
  [49, 32],
  c,
  [191, 12],
  c,
  [150, 20],
  c,
  [8, 22],
  c,
  [34, 18],
  c,
  [30, 22],
  c,
  [87, 7],
  c,
  [55, 20],
  s,
  [1, 121],
  c,
  [470, 5],
  c,
  [411, 7],
  s,
  [1, 213],
  c,
  [215, 215],
  c,
  [410, 197],
  c,
  [632, 71],
  c,
  [1438, 13],
  c,
  [967, 14],
  c,
  [1505, 26],
  c,
  [119, 22],
  c,
  [1017, 48],
  c,
  [1035, 38],
  c,
  [20, 60],
  c,
  [1095, 23],
  c,
  [1117, 42],
  c,
  [1142, 98],
  c,
  [1084, 218],
  s,
  [2, 38],
  c,
  [2118, 28],
  s,
  [1, 132]
]),
  goto: u([
  3,
  s,
  [12, 11, 1],
  29,
  30,
  28,
  25,
  26,
  31,
  c,
  [17, 16],
  41,
  39,
  34,
  42,
  s,
  [85, 7],
  c,
  [27, 16],
  s,
  [87, 7],
  c,
  [23, 16],
  s,
  [89, 7],
  c,
  [23, 16],
  s,
  [91, 7],
  c,
  [23, 16],
  48,
  42,
  49,
  42,
  95,
  52,
  95,
  53,
  55,
  54,
  41,
  42,
  58,
  137,
  57,
  s,
  [137, 4],
  s,
  [144, 4],
  39,
  144,
  25,
  41,
  39,
  42,
  s,
  [112, 6],
  63,
  s,
  [112, 17],
  c,
  [67, 13],
  42,
  s,
  [129, 6],
  72,
  s,
  [129, 17],
  96,
  s,
  [86, 6, 1],
  75,
  42,
  s,
  [98, 5, 1],
  95,
  80,
  81,
  83,
  c,
  [18, 7],
  124,
  53,
  110,
  c,
  [20, 10],
  c,
  [145, 16],
  122,
  123,
  s,
  [126, 8, 1],
  c,
  [129, 3],
  58,
  136,
  57,
  s,
  [136, 4],
  96,
  138,
  c,
  [57, 6],
  c,
  [54, 10],
  142,
  c,
  [55, 16],
  s,
  [145, 4],
  39,
  145,
  25,
  148,
  c,
  [22, 13],
  150,
  c,
  [14, 13],
  c,
  [80, 3],
  s,
  [119, 5],
  c,
  [21, 13],
  s,
  [121, 5],
  c,
  [18, 13],
  158,
  157,
  132,
  159,
  132,
  42,
  c,
  [189, 18],
  s,
  [35, 15],
  164,
  s,
  [35, 10],
  s,
  [165, 10, 1],
  s,
  [65, 3],
  175,
  s,
  [65, 3],
  176,
  178,
  23,
  177,
  23,
  179,
  s,
  [23, 16],
  180,
  181,
  182,
  s,
  [23, 18],
  184,
  c,
  [218, 16],
  c,
  [17, 17],
  c,
  [138, 7],
  c,
  [17, 10],
  188,
  c,
  [17, 16],
  s,
  [63, 7],
  189,
  63,
  s,
  [61, 3],
  190,
  s,
  [61, 6],
  c,
  [53, 17],
  c,
  [227, 13],
  s,
  [59, 3],
  194,
  s,
  [59, 7],
  s,
  [57, 3],
  195,
  s,
  [57, 8],
  s,
  [55, 10],
  196,
  197,
  55,
  55,
  s,
  [52, 4],
  198,
  199,
  s,
  [52, 6],
  200,
  201,
  s,
  [52, 4],
  s,
  [47, 12],
  202,
  203,
  s,
  [47, 6],
  s,
  [44, 4],
  204,
  205,
  s,
  [44, 16],
  s,
  [41, 4],
  206,
  41,
  41,
  207,
  208,
  s,
  [41, 16],
  c,
  [514, 9],
  209,
  c,
  [514, 38],
  34,
  c,
  [393, 8],
  c,
  [47, 10],
  212,
  214,
  213,
  215,
  216,
  217,
  c,
  [73, 9],
  c,
  [25, 10],
  c,
  [56, 10],
  219,
  220,
  221,
  c,
  [32, 7],
  222,
  c,
  [31, 10],
  c,
  [742, 3],
  224,
  225,
  150,
  226,
  231,
  155,
  232,
  155,
  39,
  42,
  233,
  c,
  [115, 13],
  235,
  234,
  236,
  c,
  [104, 18],
  240,
  239,
  242,
  241,
  c,
  [21, 17],
  c,
  [17, 52],
  247,
  c,
  [18, 16],
  42,
  c,
  [109, 18],
  c,
  [432, 30],
  c,
  [47, 34],
  255,
  214,
  256,
  259,
  156,
  232,
  39,
  c,
  [176, 69],
  c,
  [17, 186],
  275,
  c,
  [534, 29],
  c,
  [98, 68],
  281,
  c,
  [98, 8],
  c,
  [703, 26],
  214,
  284,
  c,
  [18, 16],
  231,
  158,
  232,
  158,
  42,
  288,
  159,
  287,
  159,
  231,
  290,
  232,
  39,
  42,
  c,
  [30, 16],
  96,
  292,
  c,
  [101, 16],
  c,
  [1193, 3],
  295,
  c,
  [1153, 9],
  296,
  c,
  [24, 10],
  214,
  298,
  s,
  [64, 7],
  189,
  64,
  299,
  214,
  300,
  301,
  302,
  s,
  [62, 3],
  190,
  s,
  [62, 6],
  s,
  [60, 3],
  194,
  s,
  [60, 7],
  c,
  [179, 17],
  259,
  158,
  232,
  259,
  c,
  [120, 3],
  c,
  [119, 16],
  s,
  [58, 3],
  195,
  s,
  [58, 8],
  s,
  [56, 10],
  196,
  197,
  56,
  56,
  s,
  [53, 4],
  198,
  199,
  s,
  [53, 6],
  200,
  201,
  s,
  [53, 4],
  s,
  [54, 4],
  198,
  199,
  s,
  [54, 6],
  200,
  201,
  s,
  [54, 4],
  s,
  [48, 12],
  202,
  203,
  s,
  [48, 6],
  s,
  [49, 12],
  202,
  203,
  s,
  [49, 6],
  s,
  [50, 12],
  202,
  203,
  s,
  [50, 6],
  s,
  [51, 12],
  202,
  203,
  s,
  [51, 6],
  s,
  [45, 4],
  204,
  205,
  s,
  [45, 16],
  s,
  [46, 4],
  204,
  205,
  s,
  [46, 16],
  s,
  [42, 4],
  206,
  42,
  42,
  207,
  208,
  s,
  [42, 16],
  s,
  [43, 4],
  206,
  43,
  43,
  207,
  208,
  s,
  [43, 16],
  c,
  [535, 29],
  305,
  214,
  306,
  214,
  307,
  214,
  308,
  c,
  [473, 18],
  c,
  [18, 18],
  288,
  160,
  287,
  160,
  96,
  311,
  c,
  [353, 16],
  313,
  c,
  [347, 16],
  315,
  316,
  317,
  c,
  [603, 41],
  c,
  [683, 29],
  c,
  [29, 58],
  c,
  [104, 11],
  324,
  c,
  [18, 17],
  326,
  c,
  [18, 16],
  328,
  329,
  s,
  [191, 39],
  330,
  s,
  [191, 7],
  331,
  214,
  c,
  [133, 29],
  333,
  c,
  [31, 30],
  335,
  c,
  [31, 30],
  337,
  c,
  [254, 58]
])
}),
defaultActions: bda({
  idx: u([
  s,
  [3, 4, 1],
  s,
  [12, 15, 1],
  s,
  [29, 4, 1],
  34,
  38,
  40,
  s,
  [42, 5, 1],
  51,
  54,
  60,
  61,
  65,
  70,
  73,
  74,
  76,
  s,
  [85, 7, 1],
  93,
  94,
  95,
  s,
  [98, 5, 1],
  109,
  110,
  112,
  113,
  114,
  s,
  [116, 6, 1],
  124,
  134,
  135,
  138,
  139,
  s,
  [140, 4, 2],
  147,
  148,
  150,
  151,
  s,
  [153, 5, 1],
  162,
  s,
  [164, 11, 1],
  181,
  182,
  183,
  185,
  186,
  187,
  209,
  210,
  213,
  220,
  221,
  222,
  224,
  225,
  227,
  228,
  233,
  234,
  s,
  [236, 4, 1],
  241,
  243,
  247,
  249,
  250,
  251,
  255,
  257,
  272,
  273,
  274,
  276,
  277,
  284,
  285,
  290,
  292,
  s,
  [294, 4, 1],
  299,
  300,
  302,
  303,
  304,
  311,
  313,
  s,
  [315, 5, 1],
  321,
  322,
  328,
  329,
  332,
  334,
  s,
  [336, 4, 1]
]),
  goto: u([
  2,
  204,
  206,
  207,
  s,
  [97, 13, 1],
  134,
  135,
  113,
  114,
  1,
  205,
  83,
  93,
  138,
  3,
  s,
  [86, 4, 2],
  208,
  84,
  146,
  148,
  115,
  130,
  96,
  170,
  67,
  13,
  s,
  [29, 6, 1],
  9,
  10,
  11,
  s,
  [4, 5, 1],
  37,
  183,
  185,
  187,
  188,
  s,
  [175, 6, 1],
  189,
  80,
  94,
  141,
  82,
  35,
  143,
  151,
  147,
  149,
  139,
  111,
  116,
  122,
  124,
  118,
  120,
  125,
  173,
  s,
  [69, 11, 1],
  19,
  20,
  s,
  [24, 4, 1],
  184,
  186,
  190,
  200,
  201,
  202,
  140,
  142,
  153,
  154,
  110,
  117,
  127,
  131,
  133,
  126,
  171,
  68,
  15,
  21,
  17,
  18,
  12,
  157,
  38,
  39,
  40,
  182,
  81,
  203,
  152,
  166,
  162,
  123,
  128,
  172,
  174,
  14,
  16,
  28,
  36,
  181,
  164,
  168,
  161,
  167,
  163,
  66,
  22,
  193,
  194,
  165,
  169,
  196,
  198,
  192,
  195,
  197,
  199
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack
    var lstack = new Array(128);        // location stack
    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks
    var yyloc;
    var yytext;
    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 340 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function copy_yylloc(loc) {
        var rv = shallow_copy(loc);
        if (rv && rv.range) {
            rv.range = rv.range.slice(0);
        }
        return rv;
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = shallow_copy(l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = shallow_copy(l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        rv = shallow_copy(l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: copy_yylloc(lexer.yylloc),
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 

        yyloc = lexer.yylloc;
        lstack[sp] = yyloc;
        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;

        yytext = lexer.yytext;



        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;
                lstack[sp] = copy_yylloc(lexer.yylloc);
                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:

                yytext = lexer.yytext;

                yyloc = lexer.yylloc;
                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, yytext, yyloc, newState, sp - 1, vstack, lstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;
                lstack[sp] = yyval._$;
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;

const t = require("../parsetree");

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = c_grammar;
  exports.Parser = c_grammar.Parser;
  exports.parse = function () {
    return c_grammar.parse.apply(c_grammar, arguments);
  };
  
}
